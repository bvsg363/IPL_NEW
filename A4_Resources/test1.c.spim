
	.data
area:	.word 0
perimeter:	.word 0

	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $fp, 0($sp)		# Save the frame pointer
	sub $fp, $sp, 4		# Update the frame pointer

	sub $sp, $sp, 24		# Make space for the locals
# Prologue ends

	li.d $f2, 3.00
	s.d $f2, -12($fp)
	li $v0, 2
	sw $v0, 0($fp)
	li.d $f2, 4.00
	s.d $f2, area
	li.d $f2, 2.00
	li.d $f4, 3.40
	slt $v0, $f2, $f4
	li $t0, 2
	li $t1, 3
	sgt $t2, $t0, $t1
	or $t0, $v0, $t2
	beq $t0, $zero, label9 
	li $v0, 4
	or $t2, $v0, $zero
	j label10

label9:    	
	li $t1, 6
	or $t2, $t1, $zero

label10:    	
	sw $t2, 0($fp)
	lw $v0, 0($fp)
	li $t0, 3
	sgt $t1, $v0, $t0
	lw $v0, 0($fp)
	li $t0, 5
	sgt $t2, $v0, $t0
	and $v0, $t1, $t2
	lw $t0, 0($fp)
	li $t1, 6
	slt $t2, $t0, $t1
	and $t0, $v0, $t2
	beq $t0, $zero, label11 
	li $v0, 8
	sw $v0, 0($fp)
	li $v0, 7
	sw $v0, -4($fp)
	j label12

label11:    	
	li $v0, 9
	sw $v0, 0($fp)
	li $v0, 6
	sw $v0, -4($fp)

label12:    	

label13:    	
	lw $v0, 0($fp)
	li $t0, 5
	sle $t2, $v0, $t0
	beq $t2, $zero, label15 
	li $v0, 8
	sw $v0, 0($fp)
	j label16

label15:    	
	li $v0, 9
	sw $v0, 0($fp)

label16:    	

label14:    	
	lw $v0, 0($fp)
	li $t0, 4
	seq $t1, $v0, $t0
	bne $t1, $zero, label13 
	lw $v0, 0($fp)
	li $t0, 5
	sge $t1, $v0, $t0
	l.d $f2, -12($fp)
	li.d $f4, 4.00
	slt $v0, $f2, $f4
	and $t0, $t1, $v0
	beq $t0, $zero, label19 
	li $v0, 1
	lw $t1, 0($fp)
	li $t2, 9
	sne $t3, $t1, $t2
	lw $t1, 0($fp)
	li $t2, 9
	seq $t4, $t1, $t2
	or $t1, $t3, $t4
	sltu $t2, $t1, $v0
	beq $t2, $zero, label18 
	lw $v0, 0($fp)
	li $t1, 0
	sgt $t3, $v0, $t1
	beq $t3, $zero, label17 
	li $v0, 8
	sw $v0, 0($fp)
	li $v0, 9
	sw $v0, 0($fp)

label17:    	
	li $v0, 5
	sw $v0, 0($fp)

label18:    	
	li $v0, 8
	sw $v0, 0($fp)

label19:    	

# Epilogue Begins
	add $sp, $sp, 24
	lw $fp, 0($sp)  
	jr        $31		# Jump back to the operating system.
# Epilogue Ends

